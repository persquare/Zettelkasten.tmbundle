#!/usr/bin/env python

import os 
import sys
from urlparse import parse_qs, urlparse
import logging
import logging.handlers

def delete(zkfile):
    zk_dir = os.environ.get('ZK_DIR') or os.path.join(os.environ.get('HOME'), '.zk/Notes')
    for f in zkfile:
        # Validate path
        if not f.startswith(zk_dir):
            _log_error("Invalid path: {}".format(f))
            continue
        # delete means add suffix 'deleted'    
        os.rename(f, f + '.deleted')

def error(**kwargs):
    msg = "No handler: {}\n".format(str(kwargs))
    _log_error(msg)
            
def _log_error(msg):
    dir_path = os.path.dirname(os.path.realpath(__file__))
    log_file = os.path.join(dir_path, 'debug.log')
    with open(log_file, 'w') as f:
        msg = msg + "\n"
        f.write(msg.encode('utf-8'))
        
def main():
    _log_error("OK")
    zk_url = sys.argv[1] if len(sys.argv) > 1 else 'x-zk-url://delete?file=another/path&x=foo&x=bar'

    url = urlparse(zk_url)

    # Check scheme & path
    if not url.scheme == 'x-zk-url':
        raise Exception("Invalid scheme: {}".format(url.scheme))

    arguments = parse_qs(url.query, keep_blank_values=True)

    fn = {
        'delete':delete,
    }.get(url.netloc, error)
    
    print url.netloc, fn
    
    try:
        fn(**arguments)
    except:
        arguments['action'] = url.netloc
        msg = "Bad arguments: {}\n".format(str(arguments))
        _log_error(msg)

if __name__ == '__main__':
    main()
