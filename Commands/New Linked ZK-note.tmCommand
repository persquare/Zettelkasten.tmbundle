<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>saveActiveFile</string>
	<key>command</key>
	<string>#!/usr/bin/env python
import os
import re
import codecs
from datetime import datetime
# import json

# 
#
#
#
#
#

HEADER_LINE_REGEX = r'^([a-zA-Z][a-zA-Z0-9_]*):\s*(.*)\s*'

def read_original(filepath):
    with codecs.open(filepath, 'r', 'utf-8') as f:
        txt = f.readlines()
    return txt

def original_header(txt):
    header = {}
    note = []
    for line in txt:
        match = re.match(HEADER_LINE_REGEX, line)
        if  not match:
            break
        header[match.group(1)] = match.group(2)
    return header, len(header)

def clone_header(header, index):
    hdr = dict(header)
    title = hdr.setdefault('Title', 'Split note')
    hdr['Title'] = title + ' ({})'.format(index)
    time = datetime.now()
    hdr['Date'] = time.strftime("%Y-%m-%d %H:%M:%S")
    zkid = time.strftime("%y%m%d%H%M%S")
    if index is not None:
        zkid = zkid + str(index)
    hdr['ID'] = zkid 
    return hdr 
    
def _file_path(path, header):
    filename = "zk" + header['ID'] + ".md"
    path = os.path.join(path, filename)
    return path
    

def write_zk(path, header, body=None):
    header.setdefault('Title', '')
    template = "Date: {Date}\nAuthor: {Author}\nID: {ID}\nTags: {Tags}\nTitle: {Title}\n\n"
    path = _file_path(path, header)
    with open(path, 'w') as f:
        f.write(template.format(**header))
        if body:
            f.write(body)


# def txmt_URI(path):
#     uri = "txmt://open?url=file://%s&amp;line=6&amp;column=0" % path
#     return uri


path = os.environ['TM_DIRECTORY']
txt = read_original(os.environ['TM_FILEPATH']) 
header, n = original_header(txt)
content2 = os.environ.get('TM_SELECTED_TEXT', '')

link_to_related = "\nThis note is related to [{Title}][related].\n[related]: zk://{ID}\n".format(**header)
header2 = clone_header(header, None)
link_to_new = "\nThis note is related to [{Title}][related].\n[related]: zk://{ID}\n".format(**header2)


body1 = "".join(txt + [link_to_new])
body2 = content2 + link_to_related


write_zk(path, header, body1)
write_zk(path, header2, body2)
# child_ids = [header1['ID'], header2['ID']]
# children = ["- [{}][child{}]\n".format(item, idx) for idx, item in enumerate(child_ids)]
# child_links = ["[child{}]: zk://{}\n".format(idx, item) for idx, item in enumerate(child_ids)]
# original_content = txt[n:]
# body = "".join(["This is a compilation of the following notes:\n\n"] + children + ["\n"] + child_links + ["\n----\n"] + original_content)

# print header
import subprocess

subprocess.call(["open", "txmt://open?url=file://"+_file_path(path, header2)])

</string>
	<key>input</key>
	<string>none</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>name</key>
	<string>New Linked ZK-note</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>newWindow</string>
	<key>uuid</key>
	<string>0CA068E9-9DB0-4D66-B91D-775089CD2E73</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
